import streamlit as st
import pandas as pd
import agente_dados as agente
from datetime import datetime, timedelta

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Agente Cientista de Dados", page_icon="ü§ñ", layout="wide")

# ==============================================================================
# --- BARRA LATERAL (SIDEBAR) PARA A√á√ïES CR√çTICAS ---
# ==============================================================================
with st.sidebar:
    st.title("Painel de A√ß√µes ‚öôÔ∏è")
    st.write("Use esta √°rea para a√ß√µes que alteram ou criam dados no seu sistema.")
    
    st.header("Sugest√£o de Compras")
    
    # Bot√£o de seguran√ßa para o modo real
    modo_real = st.toggle("Criar pedidos de compra reais no Bling")
    
    if st.button("Gerar Sugest√£o de Compras"):
        if modo_real:
            st.warning("MODO REAL ATIVADO: Criando pedidos no Bling...")
            with st.spinner("Analisando e criando pedidos..."):
                resultado_compras = agente.sugerir_compras(dry_run=False)
            st.success("Processo finalizado!")
            st.caption("Abaixo est√° o relat√≥rio dos pedidos que foram criados:")
            st.dataframe(resultado_compras)
        else:
            st.info("MODO DE SIMULA√á√ÉO: Nenhum pedido ser√° criado.")
            with st.spinner("Analisando em modo de simula√ß√£o..."):
                resultado_compras = agente.sugerir_compras(dry_run=True)
            st.success("Simula√ß√£o conclu√≠da!")
            st.caption("Abaixo est√° o relat√≥rio de sugest√µes:")
            st.dataframe(resultado_compras)

# ==============================================================================
# --- INTERFACE PRINCIPAL DO CHAT ---
# ==============================================================================
st.title("ü§ñ Converse com seu Agente de Dados")

# Inicializa o hist√≥rico do chat na mem√≥ria da sess√£o
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ol√°! Sou seu agente de dados. Em que posso ajudar hoje?"}]

# Exibe as mensagens antigas do hist√≥rico
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        # Se a mensagem tiver uma tabela de dados, exibe tamb√©m
        if "data" in message and isinstance(message["data"], pd.DataFrame):
            st.dataframe(message["data"])

if prompt := st.chat_input("Qual a sua an√°lise de hoje?"):
    # Adiciona e exibe a mensagem do usu√°rio
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # O Agente "pensa" e responde
    with st.chat_message("assistant"):
        resposta_container = st.empty()
        with st.spinner("Analisando sua pergunta..."):
            # 1. Roteador de inten√ß√µes decide o que fazer
            analise_roteador = agente.rotear_pergunta(prompt)
            intencao = analise_roteador.get("intencao", "erro")
            resposta_container.info(f"Inten√ß√£o detectada: `{intencao}`. Processando...")

        # 2. Executa a a√ß√£o correta com base na inten√ß√£o E nos par√¢metros
        if intencao == "analise_abc_simples":
            # Pega os par√¢metros da an√°lise do Gemini, com valores padr√£o de 90 dias
            periodo = analise_roteador.get("periodo_dias", 90)
            curva_filtro = analise_roteador.get("curva")

            with st.spinner(f"Calculando Curva ABC para os √∫ltimos {periodo} dias..."):
                hoje = datetime.now()
                data_fim = (hoje - timedelta(days=1)).strftime('%Y-%m-%d')
                # CORRE√á√ÉO: Usa a vari√°vel 'periodo' em vez de 90 fixo
                data_inicio = (hoje - timedelta(days=periodo)).strftime('%Y-%m-%d')
                df_resultado = agente.analisar_curva_abc(data_inicio, data_fim)

            st.success("An√°lise ABC Conclu√≠da!")
            
            if df_resultado is not None:
                df_para_exibir = df_resultado.copy()
                
                # --- L√ìGICA DE FILTRO DA CURVA ---
                if curva_filtro:
                    curva_filtro = curva_filtro.upper()
                    st.write(f"Filtrando resultados para a Curva: **{curva_filtro}**")
                    df_para_exibir = df_resultado[df_resultado['curva_abc'] == curva_filtro]
                
                if df_para_exibir.empty:
                    st.warning(f"Nenhum produto encontrado para a Curva '{curva_filtro}' nesse per√≠odo.")
                else:
                    st.dataframe(df_para_exibir)

                st.write("Resumo da contagem geral por curva:")
                st.write(df_resultado['curva_abc'].value_counts())
                st.session_state.messages.append({"role": "assistant", "content": f"Aqui est√° a An√°lise de Curva ABC para os √∫ltimos {periodo} dias:", "data": df_para_exibir})
            else:
                st.error("N√£o foi poss√≠vel gerar a An√°lise ABC.")
                st.session_state.messages.append({"role": "assistant", "content": "N√£o foi poss√≠vel gerar a An√°lise ABC."})


        elif intencao == "analise_abc_comparativa":
            with st.spinner(f"Comparando Curvas ABC..."):
                periodo = analise_roteador.get("periodo_dias", 90)
                curva_filtro = analise_roteador.get("curva")
                df_resultado = agente.comparar_curva_abc(periodo_em_dias=periodo, curva_filtro=curva_filtro)

            if df_resultado is not None and not df_resultado.empty:
                resposta_container.success("An√°lise Comparativa Conclu√≠da!")
                st.dataframe(df_resultado)
                st.session_state.messages.append({"role": "assistant", "content": "Aqui est√° a sua An√°lise Comparativa de Curva ABC:", "data": df_resultado})
            else:
                 resposta_container.info("Nenhuma mudan√ßa de curva detectada para os crit√©rios especificados.")
                 st.session_state.messages.append({"role": "assistant", "content": "Nenhuma mudan√ßa de curva detectada para os crit√©rios especificados."})
        
        elif intencao == "previsao_vendas":
            sku = analise_roteador.get("sku_primario")
            if sku:
                with st.spinner(f"Gerando previs√£o para o SKU '{sku}'..."):
                    resultado_previsao = agente.gerar_previsao_vendas(sku)
                
                if resultado_previsao:
                    st.success("Previs√£o gerada com sucesso!")
                    
                    # 1. Mostra a explica√ß√£o da IA primeiro
                    st.subheader("üí° Resumo da An√°lise Preditiva")
                    st.info(resultado_previsao['explicacao'])
                    
                    # 2. Mostra os dados hist√≥ricos que alimentaram o modelo
                    st.subheader("Dados Hist√≥ricos Usados para o Treino do Modelo")
                    st.dataframe(resultado_previsao['historico_df'])

                    # 3. Mostra a tabela com a previs√£o para o futuro
                    st.subheader(f"Tabela de Previs√£o (Pr√≥ximos 30 dias)")
                    st.dataframe(resultado_previsao['forecast_df'])

                    # Adiciona a explica√ß√£o ao hist√≥rico do chat
                    st.session_state.messages.append({"role": "assistant", "content": resultado_previsao['explicacao']})
                else:
                    msg_erro = f"N√£o foi poss√≠vel gerar a previs√£o para o SKU '{sku}'. Verifique se o SKU est√° correto e possui vendas hist√≥ricas suficientes."
                    st.error(msg_erro)
                    st.session_state.messages.append({"role": "assistant", "content": msg_erro})
            else:
                msg_aviso = "Para gerar uma previs√£o, por favor, especifique o SKU do produto na sua pergunta. Ex: 'previs√£o para o produto XYZ'"
                st.warning(msg_aviso)
                st.session_state.messages.append({"role": "assistant", "content": msg_aviso})

        elif intencao == "pergunta_aberta_sql":
            with st.spinner("Gerando SQL e buscando dados..."):
                df_resultado = agente.executar_analise_comparativa(prompt) # Reutilizamos esta fun√ß√£o que lida com SQL
            
            if df_resultado is not None and not df_resultado.empty:
                resposta_container.success("An√°lise Conclu√≠da!")
                st.dataframe(df_resultado)
                resumo = agente.resumir_resultados_com_gemini(df_resultado, prompt)
                st.success(resumo)
                st.session_state.messages.append({"role": "assistant", "content": resumo, "data": df_resultado})
            else:
                resposta_container.error("N√£o foi poss√≠vel executar a an√°lise ou n√£o h√° dados para a sua pergunta.")
                st.session_state.messages.append({"role": "assistant", "content": "N√£o foi poss√≠vel executar a an√°lise ou n√£o h√° dados para a sua pergunta."})
        else:
            st.error("Desculpe, n√£o consegui entender ou processar sua solicita√ß√£o.")
            st.session_state.messages.append({"role": "assistant", "content": "Desculpe, n√£o consegui entender ou processar sua solicita√ß√£o."})